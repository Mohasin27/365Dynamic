/*--------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * See License.txt in the project root for license information.
 *--------------------------------------------------------------*/

/* eslint-disable no-duplicate-imports */
import * as MsDyn365 from '@msdyn365-commerce/core';
import { getTelemetryObject, IAlertProps, IModuleProps, INodeProps, ITelemetryContent } from '@msdyn365-commerce-modules/utilities';
import classnames from 'classnames';
import * as React from 'react';

import { CookieComplianceAcceptButton, CookieComplianceLinks } from './components';
import { ICookieComplianceConfig, ICookieComplianceProps } from './cookie-compliance.props.autogenerated';

/**
 * Alert state interface.
 */
export interface IAlertState {
    visible: boolean;
}

/**
 * Cookie compliance view props interface.
 */
export interface ICookieComplianceViewProps extends ICookieComplianceProps<{}> {
    CookieComplianceBanner: IModuleProps;
    AlertProps: IAlertProps;
    Content: INodeProps;
    text?: React.ReactNode;
    links?: React.ReactNode;
    acceptButton?: React.ReactNode;
    className: string;
    onDismiss(): void;
}

/**
 *
 * CookieCompliance component.
 * @extends {React.PureComponent<ICookieComplianceProps<IHeroConfig>>}
 */
class CookieCompliance extends React.PureComponent<ICookieComplianceProps<ICookieComplianceConfig>, IAlertState> {
    private readonly cookieRef: React.RefObject<HTMLInputElement>;

    private readonly telemetryContent: ITelemetryContent = getTelemetryObject(this.props.context.request.telemetryPageName!,
        this.props.friendlyName,
        this.props.telemetry);

    public constructor(props: ICookieComplianceProps<ICookieComplianceConfig>) {
        super(props);
        this.state = { visible: false };
        this.cookieRef = React.createRef();
        this._onDismiss = this._onDismiss.bind(this);
    }

    public componentDidMount(): void {
        const { context } = this.props;

        if (context && context.request && context.request.cookies && !context.request.cookies.isConsentGiven()) {
            this.setState({ visible: true });
        }
    }

    public render(): JSX.Element | null {
        console.log(this.props);
        const { config, context, resources, telemetry } = this.props;
        const { acceptCookiesButtonText, acceptCookiesAriaLabel } = resources;
        const { visible } = this.state;

        const isConsentGiven = context && context.request && context.request.cookies && context.request.cookies.isConsentGiven();
        let moduleConfig: ICookieComplianceConfig;

        try {
            moduleConfig = config;
        } catch (error) {
            telemetry.error(`Something went wrong while rendering the alert module ------${error}`);
            return (<div>
                {"error"}
            </div>);
        }

        if (isConsentGiven && !visible) {
            this.props.context.telemetry.error('Cookie Compliance content is empty, module wont render.');
            return null;
        }

        if (!MsDyn365.msdyn365Commerce.isBrowser) {
            return (<></>);
        }

        const viewProps = {
            ...this.props,
            onDismiss: this._onDismiss,
            CookieComplianceBanner: {
                moduleProps: this.props,
                className: classnames('ms-cookie-compliance', moduleConfig.className),
                ref: this.cookieRef
            },
            AlertProps: {
                className: 'ms-cookie-compliance__container',
                color: 'white',
                fade: false
            },
            Content: {
                className: 'ms-cookie-compliance__content'
            },
            text: moduleConfig.content && (
                <MsDyn365.RichTextComponent
                    className='ms-cookie-compliance__text'
                    text={moduleConfig.content}
                    editProps={{ onEdit: this.handleContentChange, requestContext: this.props.context.request }}
                />
            ),
            links: moduleConfig.actionLinks && moduleConfig.actionLinks.length > 0 && (
                <CookieComplianceLinks
                    links={moduleConfig.actionLinks}
                    onTextChange={this.handleLinkTextChange}
                    requestContext={this.props.context.request}
                    telemetryContent={this.telemetryContent}
                />
            ),
            acceptButton: (
                <CookieComplianceAcceptButton
                    onClose={this._onDismiss}
                    acceptCookiesButtonText={acceptCookiesButtonText}
                    acceptCookiesButtonAriaLabel={acceptCookiesAriaLabel}
                    telemetryContent={this.telemetryContent}
                />)
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    /**
     * Handles Link content change event.
     * @param linkIndex - Index of link in linkarray.
     * @returns Void.
     */
    public handleLinkTextChange = (linkIndex: number) => (event: MsDyn365.ContentEditableEvent): void => {
        if (this.props.config.actionLinks?.[linkIndex]) {
            this.props.config.actionLinks[linkIndex].linkText = event.target.value;
        }
    };

    /**
     * Handles content change event.
     * @param event - Event.
     */
    public handleContentChange = (event: MsDyn365.ContentEditableEvent): void => {
        this.props.config.content = event.target.value;
    };

    private _onDismiss(): void {
        const { context } = this.props;

        if (context && context.request && context.request.cookies) {
            context.request.cookies.setConsentCookie();
            location.reload();
        }
        this.setState({ visible: false });
    }
}

export default CookieCompliance;
