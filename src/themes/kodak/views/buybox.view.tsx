/*--------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * See License.txt in the project root for license information.
 *--------------------------------------------------------------*/

/* eslint-disable no-duplicate-imports */
import {
    IBuyboxAddToCartViewProps,
    IBuyboxAddToOrderTemplateViewProps,
    IBuyboxAddToWishlistViewProps,
    IBuyboxCallbacks,
    // IBuyboxData,
    IBuyboxFindInStoreViewProps,
    IBuyboxKeyInPriceViewProps,
    IBuyboxProductConfigureDropdownViewProps,
    IBuyboxProductConfigureViewProps,
    IBuyboxProductQuantityViewProps,
    IBuyboxProps,
    IBuyboxShopSimilarLookViewProps,
    IBuyboxState
    // IBuyboxViewProps
} from '@msdyn365-commerce-modules/buybox';
import {IBuyboxData} from '../../../modules/buybox/buybox.data';
import {IBuyboxViewProps} from '../../../modules/buybox/buybox';
import {IDealOfTheDayDivProps} from '../../../modules/buybox/components/buybox-find-in-store';
import { IncrementalQuantity, ITelemetryContent, Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
import { IActionContext } from '@msdyn365-commerce/core';
import GetProductShippingStatus, {GetProductShippingStatusInput} from '../../../actions/get-product-shipping-status.action';
import { IBuyboxProps as IBuyboxExtentionProps, IBuyboxResources as IBuyboxExtentionResources } from '../definition-extensions/buybox.ext.props.autogenerated';
import { useState } from 'react';
// import { Node } from '@msdyn365-commerce/retail-proxy';



const BuyboxView: React.FC<IBuyboxViewProps & IBuyboxExtentionProps<IBuyboxData>> = props => {
    
    const { ModuleProps, MediaGalleryContainerProps, ProductInfoContainerProps,
        addToCart, addToOrderTemplate, addToWishlist,
        telemetryContent, configure, description, findInStore, dealOfTheDay,
        quantity, price, title, rating, callbacks, state, resources, inventoryLabel, shopSimilarLook, keyInPrice,
        quantityLimitsMessages, max, shopSimilarDescription, unitOfMeasure } = props;
        let [shippingStatus, setStaticContent] = useState('');
     console.log(props);
     const test2 = () =>{
        console.log("test2 has been called")
    }
    return (
        <Module {...ModuleProps}>
            <Node {...MediaGalleryContainerProps}>
                {props.mediaGallery}
            </Node>
            <Node {...ProductInfoContainerProps}>
                {title}
                {/* {dealOfTheDay && _renderDealOfTheDay(dealOfTheDay)} */}
                {/* {price} */}
                { dealOfTheDay && _renderPrice(price,dealOfTheDay)}
                {unitOfMeasure} 
                {description}
                { _renderTextBlock(props.slots.textBlocks)}
                {rating}
                {configure && _renderConfigure(configure)}
                {keyInPrice && _renderKeyInPrice(keyInPrice)}
                {quantity && _renderQuantity(quantity, callbacks, props, state, resources, quantityLimitsMessages, max, telemetryContent)}
                {inventoryLabel}
                { _renderCartAndActions(addToCart, addToOrderTemplate, addToWishlist)}            
                
                {findInStore && _renderFindInStore(findInStore)}
                { findInStore &&  _renderShippingStatus(findInStore, props.context.actionContext, test2)}
                {/* // { findInStore &&  _renderShippingStatusText()}  */}
                { _renderSocialShare(props.slots && props.slots.socialShare)}
               
                {shopSimilarLook && _renderShopSimilarItem(shopSimilarLook)}
                {shopSimilarDescription && _renderShopSimilarItem(shopSimilarDescription)}
            </Node>
        </Module>
    );

   
};

const _renderPrice = (price: React.ReactNode, dealOfTheDay: IDealOfTheDayDivProps): JSX.Element | undefined  => {
    
    const { ContainerProps,div , isDealValid } = dealOfTheDay;
    if(!isDealValid)
    return (
       <>
           {price}
        </>
    );
    else
    return (
        <Node {...ContainerProps}>
           {div}
        </Node>
    );
};

const _renderTextBlock = (textBlocks: React.ReactNode[]): JSX.Element | undefined => {
    if (!textBlocks || textBlocks.length === 0) {
        return undefined;
    }

    return (
        <>
            {textBlocks[0]}
        </>
    );
};

const _renderSocialShare = (socialShare: React.ReactNode[]): JSX.Element | undefined => {
    if (!socialShare || socialShare.length === 0) {
        return undefined;
    }

    return (
        <>
            {socialShare[0]}
        </>
    );
};

const _renderCartAndActions = (
    addToCart?: IBuyboxAddToCartViewProps,
    addToOrderTemplate?: IBuyboxAddToOrderTemplateViewProps,
    addToWishlist?: IBuyboxAddToWishlistViewProps): JSX.Element | undefined => {
    if (!addToCart && !addToWishlist) {
        return undefined;
    }

    return (
        <div className='product-add-to-cart'>
            {addToCart && addToCart.errorBlock}
            {addToOrderTemplate && addToOrderTemplate.errorBlock}
            {addToWishlist && addToWishlist.errorBlock}
            <div className='buttons'>
                {addToCart && addToCart.button}
                {addToOrderTemplate && addToOrderTemplate.button}
                {addToWishlist && addToWishlist.button}
            </div>
        </div>
    );
};

const _renderConfigure = (configure: IBuyboxProductConfigureViewProps): JSX.Element => {
    const { ContainerProps, dropdowns } = configure;

    return (
        <Node {...ContainerProps}>
            {dropdowns.map(_renderConfigureDropdown)}
        </Node>
    );
};

const _renderConfigureDropdown = (dropdown: IBuyboxProductConfigureDropdownViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors, select } = dropdown;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>
            {select}
        </Node>
    );
};

const _renderFindInStore = (findInStore: IBuyboxFindInStoreViewProps): JSX.Element => {
    const { ContainerProps, storeSelector, heading, description, errors, button, modal, productPickupOptionList } = findInStore;
    console.log(findInStore);
    return (
        <Node {...ContainerProps}>
            {storeSelector}
            {heading}
            {productPickupOptionList}
            {description}
            {errors}
            {button}
            {modal}
        </Node>
    );
};

// const _renderDealOfTheDay = (dealOfTheDay: IDealOfTheDayDivProps): JSX.Element => {
//     const { ContainerProps,div } = dealOfTheDay;

//     return (
//         <Node {...ContainerProps}>
//            {div}
//         </Node>
//     );
// };

var isVisible = 'none';

const _renderShippingStatus = (findInStore: IBuyboxFindInStoreViewProps, actionContext: IActionContext, test2: () => void): JSX.Element => {
    //const { ContainerProps, heading, description, errors, button, modal, productPickupOptionList } = findInStore;
    test2();
    return (

        <button  onClick={() => test("44",actionContext)}/>
    );
};

// const _renderShippingStatusText = (): JSX.Element => {
//     //const { ContainerProps, heading, description, errors, button, modal, productPickupOptionList } = findInStore;
    
//     return (
//         <p style={{display: `${isVisible}`}}>Called Succeeded</p>
//     );
// };

 const  test = async (id: any, conts: IActionContext) =>{
    const actionInput = new GetProductShippingStatusInput(id);
        
    // Run and await the result of the data action
    const product =  await GetProductShippingStatus(actionInput,conts);
    debugger;
    // Log the result to the console
   
    console.log("test")
}


/**
 * On Change function.
 * @param callbacks -Callbacks.
 * @returns Update quantity.
 */
const onChangeHandler = (callbacks: IBuyboxCallbacks) => (newValue: number): boolean => {
    if (callbacks.updateQuantity) {
        return callbacks.updateQuantity(newValue);
    }
    return true;
};

const _renderQuantity = (
    quantityComponent: IBuyboxProductQuantityViewProps,
    callbacks: IBuyboxCallbacks,
    props: IBuyboxProps<IBuyboxData>,
    state: IBuyboxState,
    extentionResources: IBuyboxExtentionResources,
    quantityLimitsMessages: React.ReactNode,
    max: number | undefined,
    telemetryContent?: ITelemetryContent): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors } = quantityComponent;

    const {
        resources
    } = props;

    const
        {
            quantity
        } = state;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>

            <IncrementalQuantity
                id='ms-buybox__product-quantity-input'
                max={max}
                currentCount={quantity}
                onChange={onChangeHandler(callbacks)}
                inputQuantityAriaLabel={resources.inputQuantityAriaLabel}
                decrementButtonAriaLabel={extentionResources.decrementButtonAriaLabel}
                incrementButtonAriaLabel={extentionResources.incrementButtonAriaLabel}
                minQuantityText={extentionResources.minQuantityText}
                maxQuantityText={extentionResources.maxQuantityText}
                telemetryContent={telemetryContent}
            />
            {quantityLimitsMessages}
        </Node>
    );
};

const _renderKeyInPrice = (keyInPrice: IBuyboxKeyInPriceViewProps): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, input } = keyInPrice;

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
            </Node>
            {input}
        </Node>

    );
};

const _renderShopSimilarItem = (shopSimilarItem: IBuyboxShopSimilarLookViewProps): JSX.Element => {
    const { ContainerProps, errors, input } = shopSimilarItem;

    return (
        <Node {...ContainerProps}>
            {errors}
            {input}
        </Node>
    );
};

export default BuyboxView;
